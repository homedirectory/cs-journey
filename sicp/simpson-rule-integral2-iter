#lang sicp

(define (cube x)
  (* x x x)
  )

(define (sum term a next b)
  
  (define (iter a result)
    (if (> a b) result
     (iter (next a) (+ result (term a)) )
     )
    )
  
  (iter a 0)
  )

;(define (sum term a next b)
;  (if (> a b)
;      0
;      (+ (term a)
;         (sum term (next a) next b))))

(define (simpson-integral f a b n)

  (define h (/ (- b a) n))
  
  (define (simpson-term x)
    (define k (* x n))
    (cond ((or (= k 0) (= k n)) (f x))
          ((= (remainder k 2) 1) (* 4 (f x)))
          ((= (remainder k 2) 0) (* 2 (f x)))
          )
    )

  (define (simpson-next x)
    (+ x h)
    )
  
  (* (sum simpson-term a simpson-next b) (/ h 3))
  
  )
