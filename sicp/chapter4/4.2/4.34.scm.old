#lang sicp

(#%require "../../helpers.scm" "core-helpers.scm"
           "if.scm" "lambda.scm" "begin.scm" "cond.scm" "let.scm"
           "define.scm" "and-or.scm" "for.scm" "env.scm" "thunk.scm")

; Exercise 4.34: Modify the driver loop for the evaluator so
; that lazy pairs and lists will print in some reasonable way.
; (What are you going to do about infinite lists?) You may
; also need to modify the representation of lazy pairs so that
; the evaluator can identify them in order to print them.

; Lazy pairs and lists will be printed up to 10 elements.
; By printing I mean a call to the "display" procedure.
; In:  (define a '(1 2 3 4 5 6 7 8 9 10 11 12))
; Out: ok
; In:  (display a)
; Out: (1 2 3 4 5 6 7 8 9 10 ...)
; In:  a
; Out: procedure...

; Lazy pairs will be represented as pairs:
; ('lazy-pair proc), where proc is the result of cons

(define (lazy-pair? exp env)
  (if (variable? exp)
      (let ((val (lookup-variable-value exp env)))
        (and (pair? val) (eq? 'lazy-pair (car val))))
      #f))

(define (lazy-pair-exp? exp)
  (tagged-list? exp 'lazy-pair))

(define (evaluator-car obj)
  (make-application 'car (list obj)))
(define (evaluator-cdr obj)
  (make-application 'cdr (list obj)))

; input is a variable name
(define (lazy-pair-represent input env)
  (define (iter pair res)
    (let ((val (actual-value (evaluator-car pair) env)))
      (cond ((null? val) res)
            ((= 10 (length res)) (append res (list "...")))
            (else (iter (actual-value (evaluator-cdr pair) env) (append res (list val))))
            )))
  
  (iter (cadr (lookup-variable-value input env)) '()))

(define (handle-output input env)
  (if (lazy-pair? input env)
      (lazy-pair-represent input env)
      (actual-value input env)))

(define (cons? exp)
  (tagged-list? exp 'cons))

(define (display? exp)
  (tagged-list? exp 'display))

(define (eval-display exp env)
  (let ((arg (car (operands exp))))
    (if (lazy-pair? arg env)
        (let ((new-exp (make-application 'display (list (lazy-pair-represent arg env)))))
          (m-apply (actual-value (operator new-exp) env)
                   (operands new-exp) env))
        (m-apply (actual-value (operator exp) env)
                 (operands exp) env))
    ))

; --- lazy-core.scm included for tests ---
(define apply-in-underlying-scheme apply)

; ***** 4.1.1 The Core of the Evaluator *****

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp) (make-procedure (lambda-parameters exp)
                                       (lambda-body exp)
                                       env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((let? exp)
         (eval (let->combination exp) env))
        ((letrec? exp)
         (eval (letrec->let exp) env))
        ((let*? exp)
         (eval (let*->nested-lets exp) env))
        ; special rule for representation of lazy pairs
        ((cons? exp)
         (cons 'lazy-pair
               (m-apply (actual-value (operator exp) env) (operands exp) env)))
        ; special rule for displaying lazy pairs
        ((display? exp) (eval-display exp env))
        ; special rule for evaluating lazy pairs
        ((lazy-pair-exp? exp) (eval (cdr exp) env))
        ((application? exp)
         (m-apply (actual-value (operator exp) env)
                  (operands exp) env))
        (else
         (error "Unknown expression type: EVAL" exp))))

(define (m-apply procedure arguments env)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure
          procedure
          (list-of-arg-values arguments env)))
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           (list-of-delayed-args arguments env)
           (procedure-environment procedure))))
        (else
         (error "Unknown procedure type: APPLY" procedure))))

(define (actual-value exp env)
  (force-it (eval exp env)))

; Thunks
(define (force-it obj)
  (cond ((thunk? obj)
         (let ((result (actual-value (thunk-exp obj)
                                     (thunk-env obj))))
           (set-car! obj 'evaluated-thunk)
           (set-car! (cdr obj) result) ; replace exp with its value
           (set-cdr! (cdr obj) '())    ; forget unneeded env
           result))
        ((evaluated-thunk? obj) (thunk-value obj))
        (else obj)))

(define (list-of-arg-values exps env)
  (if (no-operands? exps)
      '()
      (cons (actual-value (first-operand exps) env)
            (list-of-arg-values (rest-operands exps) env))))
(define (list-of-delayed-args exps env)
  (if (no-operands? exps)
      '()
      (cons (delay-it (first-operand exps) env)
            (list-of-delayed-args (rest-operands exps) env))))

(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env)
  'ok)

; begin.scm
(define (eval-sequence exps env)
  (cond ((last-exp? exps)
         (eval (first-exp exps) env))
        (else
         (eval (first-exp exps) env)
         (eval-sequence (rest-exps exps) env))))

; define.scm
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
    (eval (definition-value exp) env)
    env)
  'ok)

; and-or.scm
(define (eval-and exp env)
  (define (eval-and-exps exps last-val)
    (if (null? exps)
        last-val
        (let ((val (eval (car exps) env)))
          (if (true? val)
              (eval-and-exps (cdr exps) val)
              'false
              )
          )
        )
    )

  (eval-and-exps (and-exps exp) 'true)
  )

(define (eval-or exp env)
  (define (eval-or-exps exps)
    (if (null? exps)
        'false
        (let ((val (eval (car exps) env)))
          (if (true? val)
              val
              (eval-or-exps (cdr exps))
              )
          )
        )
    )

  (eval-or-exps (or-exps exp))
  )

; if.scm
(define (eval-if exp env)
  (if (true? (actual-value (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))

; Representing procedures
(define (make-procedure parameters body env)
  (list 'procedure parameters (scan-out-defines body) env))
;  (list 'procedure parameters body env))
(define (compound-procedure? p)
  (tagged-list? p 'procedure))
(define (procedure-parameters p) (cadr p))
(define (procedure-body p) (caddr p))
(define (procedure-environment p) (cadddr p))

; Exercise 4.16 - scanning out variable definitions in procedure body
(define (scan-out-defines body)
  (define (scan-exps exps defines not-defines)
    (if (null? exps)
        (if (not (null? defines))
            (transform defines not-defines)
            body
            )
        (if (and (definition? (car exps)) (definition-variable? (car exps)))
            (scan-exps (cdr exps) (append defines (list (car exps))) not-defines)
            (scan-exps (cdr exps) defines (append not-defines (list (car exps)))))
        ))

  (scan-exps body '() '()))

(define (transform defines rest-body)
  (define (defines->statements defs)
    (map (lambda (d) (list (cadr d) (make-quotation '*unassigned*))) defs))
  (define (extend-let-body defines body)
    (if (null? defines)
        body
        ;{{define b {+ a x}} {define a 5}}
        (append
         (map (lambda (d)
                (list 'set! (cadr d) (caddr d)))
              defines)
         body)
        ))

  (let ((statements (defines->statements defines)))
    (list
     (make-let
      statements
      (extend-let-body defines rest-body))))
  )

; 4.1.4 Running the Evaluator as a Program
(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        (list 'list list)
        (list 'newline newline)
        (list 'display display)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list '= =)
        (list '> >)
        (list '< <)
        (list '>= >=)
        (list '<= <=)
        ;⟨more primitives⟩
        ))
(define (primitive-procedure-names)
  (map car primitive-procedures))
(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))

(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))

(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (primitive-implementation proc) (cadr proc))
(define (apply-primitive-procedure proc args)
  (apply-in-underlying-scheme
   (primitive-implementation proc) args))

; driver loop
(define input-prompt ";;; L-Eval input:")
(define output-prompt ";;; L-Eval value:")

(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))
(define (announce-output string)
  (newline) (display string) (newline))
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>))
      (display object)))
; ----------------------------------------------------------------

(define test-env (setup-environment))

; --- lazy-lists.scm ---
(define lazy-cons
  (list
   ; (define (cons x y) (lambda (m) (m x y)))
   (make-definition
    (list 'cons 'x 'y)
    (make-lambda (list 'm) (list (make-application 'm (list 'x 'y)))))
   ; (define (car z) (z (lambda (p q) p)))
   (make-definition
    (list 'car 'z)
    (make-application 'z (list (make-lambda (list 'p 'q) (list 'p)))))
   ; (define (cdr z) (z (lambda (p q) q)))
   (make-definition
    (list 'cdr 'z)
    (make-application 'z (list (make-lambda (list 'p 'q) (list 'q)))))
   ))
(map (lambda (exp) (eval exp test-env)) lazy-cons)
; ---------------------

; driver loop
(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output
           (actual-value
            input test-env)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))

; primitive pair
(define pp-def (make-definition 'pp (make-application 'cons (list 1 2))))
(eval pp-def test-env)
; test func
(define test-func-def (make-definition
                       (list 'func 'x)
                       (list (make-application 'newline (list))
                             (make-application 'display (list "func")) 'x)))
(eval test-func-def test-env)