#lang sicp

(define (last-pair l)
  (if (null? (cdr l)) l
      (last-pair (cdr l))
      )
  )

(define (reverse l)

  (define (iter result lst)
    (if (null? lst) result
        (iter (append (list (car lst)) result) (cdr lst))
        )
    )

  (iter (list) l)
  
  )


(define us-coins (list 5 25 1 10 50))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))

(define (no-more? coins)
  (null? coins)
  )

(define (except-first-denomination coins)
  (cdr coins)
  )

(define (first-denomination coins)
  (car coins)
  )

(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else
         (+ (cc amount
                (except-first-denomination
                 coin-values))
            (cc (- amount
                   (first-denomination
                    coin-values))
                coin-values)))))


(define (same-parity . l)
  (let ((rem (remainder (car l) 2)))

    (define (iter result l)
      (cond
        ((null? l) result)
        ((= (remainder (car l) 2) rem)
         (iter (append result (list (car l))) (cdr l))
         )
        (else (iter result (cdr l)))
        )
      )

    (iter (list) l)
    )
  )

(define (my-map proc items)
  (if (null? items)
      nil
      (cons (proc (car items)) (map proc (cdr items)))
      )
  )

(define (square x) (* x x))

(define (square-list items)
  
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (append answer
                      (list (square (car things)))))))
  
  (iter items (list))
  )

(define (count-leaves x)
  (cond ((null? x) 0)
        ((not (pair? x)) 1)
        (else (+ (count-leaves (car x))
                 (count-leaves (cdr x))))))

(define (print x)
  (display x)
  (newline)
  )

(define (deep-reverse l)
  (cond
    ((null? l) nil)
    ((not (pair? l)) l)
    ;((= (count-leaves l) 1) (car l))
    ((null? (cdr l)) (list (deep-reverse (car l))))
    (else (append (deep-reverse (cdr l)) (list (deep-reverse (car l)))))
    )
  )

;(define l (list (list 1 2) 3 (list 0 21) 4 (list 5 6)))
;(print l)
;(deep-reverse l)

(define (fringe x)
  (cond
    ((null? x) (list))
    ((not (pair? x)) (list x))
    (else (append (fringe (car x)) (fringe (cdr x))))
    )
  )

(define (make-mobile left right)
  (cons left right)
  )

(define (make-branch length structure)
  (cons length structure)
  )

(define (left-branch mob)
  (car mob)
  )

(define (right-branch mob)
  (cdr mob)
  )

(define (branch-length br)
  (car br)
  )

(define (branch-structure br)
  (cdr br)
  )

(define (total-weight mobile)
  (cond
    ((null? mobile) 0)
    ((not (pair? mobile)) mobile)
    (else (+
           (total-weight (branch-structure (left-branch mobile)))
           (total-weight (branch-structure (right-branch mobile)))
           )
          )
    )
  )

(define lb (make-branch 2 (make-mobile (make-branch 1 1) (make-branch 1 1))))
(define rb (make-branch 1 4))
(define root (make-mobile lb rb))

(define (torque branch)
  (* (branch-length branch) (total-weight (branch-structure branch)))
  )

(define (balanced? mobile)
  (if (not (pair? mobile))
      true
      (and (= (torque (left-branch mobile)) (torque (right-branch mobile)))
           (balanced? (branch-structure (left-branch mobile)))
           (balanced? (branch-structure (right-branch mobile)))
           )
      )
  )

(define (map-tree proc tree)
  (cond ((null? tree) nil)
        ((not (pair? tree)) (proc tree))
        (else (cons
               (map-tree proc (car tree))
               (map-tree proc (cdr tree))
               )
              )
        )
  )

(define (map-tree-ho proc tree)
  
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (map-tree-ho proc sub-tree)
             (proc sub-tree)
             ))
       tree)
  )

(define (subsets s)
  (if (null? s)
      (list nil)
      (let ((rest (subsets (cdr s))))
        (append rest (map
                      (lambda (x) (append (list (car s)) x))
                      rest))
        )
      )
  )

(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))

(define (enumerate-tree tree)
  (cond ((null? tree) nil)
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))

(define (map-a p sequence)
  (accumulate (lambda (x y)
                (cons (p x) y))
              nil
              sequence)
  )

(define (append-a seq1 seq2)
  (accumulate cons
              seq2 seq1))

(define (length-a sequence)
  (accumulate
   (lambda (x y) (inc y)) 0 sequence))

(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms)
                (+ this-coeff (* x higher-terms)))
              0
              coefficient-sequence))

(define (count-leaves-a t)
  (accumulate (lambda (x y) (cond
                              ((null? x) (+ 0 y))
                              ((not (pair? x)) (+ 1 y))
                              (else (+ (count-leaves-a x) y))
                              )
                )
              0
              (map
               (lambda (x) x)
               t))
  )

(define t (list (list 1 (list 2 (list 11 12))) (list 3 (list 4))))

; returns a list of first elements from each sequence
(define (cars seqs)
  (if (null? seqs) nil
      (cons (caar seqs) (cars (cdr seqs)))
      )
  )

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons
       (accumulate op init (cars seqs))
       (accumulate-n op init (map (lambda (x) (cdr x)) seqs)))
      )
  )

(define s (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))

(define mat-a (list (list 1 2) (list 3 4)))
(define vec-v (list (list 1) (list 2)))

(define (dot-product v w)
  (accumulate + 0 (map * v w))
  )

(define (matrix-*-vector m v)
  (map (lambda (x) (dot-product x v)) m)
  )

(define (transpose m)
  (accumulate-n cons nil m)
  )

(define (matrix-*-matrix a b)
  (map (lambda (r) (matrix-*-vector (transpose b) r)) a)
  )

(define mat-b (list (list 2 1) (list 5 3)))

(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))

(define (reverse-right seq)
  (accumulate (lambda (x y) (append y (list x))) nil seq)
  )

(define (reverse-left seq)
  (fold-left (lambda (x y) (append (list y) x)) nil seq)
  )

; nested mappings

(define (remove item sequence)
  (filter (lambda (x) (not (= x item)))
          sequence))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (permutations s)
  (if (null? s)  ; empty set?
      (list nil) ; sequence containing empty set
      (flatmap (lambda (x)
                 (map (lambda (p) (cons x p))
                      (permutations (remove x s))))
               s)))

; Exercise 2.40
(define (unique-pairs n)
  (flatmap (lambda (i)
             (map (lambda (j)
                    (list i j)
                    )
                  (enumerate-interval (+ i 1) n)
                  )
             )
           (enumerate-interval 1 n)
           )
  )

; 2.41
(define (unique-triples n)
  (flatmap (lambda (i)
             (flatmap (lambda (j)
                        (map (lambda (k)
                               (list i j k)
                               )
                             (enumerate-interval (+ j 1) n))
                        )
                      (enumerate-interval (+ i 1) n)
                      )
             )
           (enumerate-interval 1 n))
  )

(define (sum seq)
  (accumulate + 0 seq)
  )

(define (filter-triples-sum n s)
  (filter (lambda (seq) (= (sum seq) s))
          (unique-triples n)
          )
  )

(define (index value seq)

  (define (iter s counter)
    (if (= (car s) value)
        counter
        (iter (cdr s) (+ counter 1))
        )
    )
  
  (iter seq 0)
  )

(define (get-list-nth seq n)

  (define (iter i s)
    (if (= i n)
        (car s)
        (iter (+ i 1) (cdr s))
        )
    )

  (iter 0 seq)
  )

(define (slice seq start end)

  (define (iter i s result)
    ;(print i)
    (cond
      ((< i start) (iter (+ i 1) (cdr s) result))
      ((and (or (> i start) (= i start)) (< i end) (< i (length seq)) )
       (iter (+ i 1) (cdr s) (append result (list (car s)))))
      (else result)
      )
    )

  (iter 0 seq nil)
  )

(define empty-board (list))

(define (safe? coln board board-size)
  (newline)
  (print board)
  (display "coln:")
  (print coln)
  ; coln == board-size
  (if (< (length board) 2)
      #t
      (let (
            (rown (index 1 (get-list-nth board (- coln 1))))
            )
        (display "rown:")
        (print rown)
        (cond
          ; check row
          ((> (sum (map (lambda (col) (get-list-nth col rown)) board)) 1)
           (print "row false") #f)
          ; check diagonal (upper-left)
          ((> (sum (map (lambda (ind col)
                          (get-list-nth col ind)
                          )
                        (filter (lambda (x) (> x (- 1)))
                                (map (lambda (x) (- rown x))
                                     (reverse (enumerate-interval 1 (- coln 1))))
                                )
                        (slice board (max 0 (- coln rown 1)) (- coln 1)))
                   ) 0)
           (print "upper-left false") #f)
          ; check diagonal (lower-left)
          ((> (sum (map (lambda (ind col)
                          (get-list-nth col ind)
                          )
                        (filter (lambda (x) (< x board-size))
                                (map (lambda (x) (+ rown x))
                                     (reverse (enumerate-interval 1 (- coln 1))))
                                )
                        (slice board (max 0 (- (- coln 1) (- board-size rown 1))) (- coln 1)))
                   ) 0)
           (print "lower-left false") #f)
          (else (print "true") #t)
          )
        )
       
      )
  )

(define (adjoin-position rown coln pos-set board-size)
  (print pos-set)
  (if (null? pos-set)
      (list (map (lambda (x)
                   (if (= x rown)
                       1
                       0
                       )
                   )
                 (enumerate-interval 1 board-size))
            )
      (append pos-set
              (list (map (lambda (x)
                           (if (= x rown)
                               1
                               0
                               )
                           )
                         (enumerate-interval 1 board-size))
                    ))
      )
  )

(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions board-size))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position
                    new-row k rest-of-queens board-size))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))

(define board (list (list 1 0 0 0 0 0 0 0) (list 0 0 1 0 0 0 0 0) (list 0 0 0 0 0 0 0 1) (list 0 1 0 0 0 0 0 0)))


;(define (right-split painter n)
;  (if (= n 0)
;      painter
;      (let ((smaller (right-split painter (- n 1))))
;        (beside painter (below smaller smaller)))))

;(define (split outter inner)
;  (lambda (painter)
;    (outter painter (inner painter painter))
;    )
;  )

(define (make-vect x y)
  (cons x y)
  )

(define (xcor-vect v)
  (car v)
  )

(define (ycor-vect v)
  (cdr v)
  )

(define (add-vect v1 v2)
  (cons
   (+ (xcor-vect v1) (xcor-vect v2))
   (+ (ycor-vect v1) (ycor-vect v2))
   )
  )

(define (sub-vect v1 v2)
  (cons
   (- (xcor-vect v1) (xcor-vect v2))
   (- (ycor-vect v1) (ycor-vect v2))
   )
  )

(define (scale-vect s v)
  (cons (* s (xcor-vect v)) (* s (ycor-vect v)))
  )

(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2)
  )

(define (origin-frame frame)
  (car frame)
  )

(define (edge1-frame frame)
  (cadr frame)
  )

(define (edge2-frame frame)
  (caddr frame)
  )

(define (frame-coord-map frame)
  (lambda (v)
    (add-vect
     (origin-frame frame)
     (add-vect (scale-vect (xcor-vect v) (edge1-frame frame))
               (scale-vect (ycor-vect v) (edge2-frame frame))))))

(define (make-segment v1 v2)
  (cons v1 v2)
  )

(define (start-segment segment)
  (car segment)
  )

(define (end-segment segment)
  (cdr segment)
  )

(define (segments->painter segment-list)
  (lambda (frame)
    (for-each
     (lambda (segment)
       (draw-line
        ((frame-coord-map frame)
         (start-segment segment))
        ((frame-coord-map frame)
         (end-segment segment))
        )
       )
     segment-list)
    )
  )

;2.49
;a. outline of the frame
(define (painter-outline frame)
  (let (
        (segments (list (make-segment (make-vect 0 0) (make-vect 0 1))
                        (make-segment (make-vect 0 1) (make-vect 1 1))
                        (make-segment (make-vect 1 1) (make-vect 1 0))
                        (make-segment (make-vect 1 0) (make-vect 0 0))
                        ))
        )
    ((segments->painter segments) frame)
    )
  )

;b. X of the frame
(define (painter-x frame)
  (let (
        (segments (list (make-segment (make-vect 0 1) (make-vect 1 0))
                        (make-segment (make-vect 0 0) (make-vect 1 1))
                        ))
        )
    ((segments->painter segments) frame)
    )
  )

;c. diamond shape
(define (painter-diamond frame)
  (let (
        (segments (list (make-segment (make-vect 0 0.5) (make-vect 0.5 1))
                        (make-segment (make-vect 0.5 1) (make-vect 1 0.5))
                        (make-segment (make-vect 1 0.5) (make-vect 0.5 0))
                        (make-segment (make-vect 0.5 0) (make-vect 0 0.5))
                        ))
        )
    ((segments->painter segments) frame)
    )
  )

;d. wave painter
(define (painter-wave frame)
  1
  )

(define (transform-painter painter origin corner1 corner2)
  (lambda (frame)
    (let ((m (frame-coord-map frame)))
      (let ((new-origin (m origin)))
        (painter (make-frame
                  new-origin
                  (sub-vect (m corner1) new-origin)
                  (sub-vect (m corner2) new-origin)))))))

(define (flip-vert painter)
  (transform-painter painter
                     (make-vect 0.0 1.0) ; new origin
                     (make-vect 1.0 1.0) ; new end of edge1
                     (make-vect 0.0 0.0) ; new end of edge2
                     ) 
  )

(define (shrink-to-upper-right painter)
  (transform-painter
   painter (make-vect 0.5 0.5)
   (make-vect 1.0 0.5) (make-vect 0.5 1.0)))

(define (rotate90 painter)
  (transform-painter painter
                     (make-vect 1.0 0.0)
                     (make-vect 1.0 1.0)
                     (make-vect 0.0 0.0)))

(define (squash-inwards painter)
  (transform-painter painter
                     (make-vect 0.0 0.0)
                     (make-vect 0.65 0.35)
                     (make-vect 0.35 0.65)))

(define (beside painter1 painter2)
  (let ((split-point (make-vect 0.5 0.0)))
    (let ((paint-left
           (transform-painter
            painter1
            (make-vect 0.0 0.0)
            split-point
            (make-vect 0.0 1.0)))
          (paint-right
           (transform-painter
            painter2
            split-point
            (make-vect 1.0 0.0)
            (make-vect 0.5 1.0))))
      (lambda (frame)
        (paint-left frame)
        (paint-right frame)))))

(define (flip-horiz painter)
  (transform-painter painter
                     (make-vect 1 0) ;new origin
                     (make-vect 0 0) ;new edge1
                     (make-vect 1 1) ;new edge2
                     )
  )

(define (rotate180 painter)
  (transform-painter painter
                     (make-vect 1 1) ;new origin
                     (make-vect 0 1) ;new edge1
                     (make-vect 1 0) ;new edge2
                     )
  )

(define (rotate270 painter)
  (transform-painter painter
                     (make-vect 0 1) ;new origin
                     (make-vect 0 0) ;new edge1
                     (make-vect 1 1) ;new edge2
                     )
  )

;2.51
(define (below painter1 painter2)
  (let (
        (paint-down
         (transform-painter painter1
                            (make-vect 0 0)
                            (make-vect 1 0)
                            (make-vect 0 0.5)))
        (paint-up
         (transform-painter painter2
                            (make-vect 0 0.5)
                            (make-vect 1 0.5)
                            (make-vect 0 1)))
        )
    (lambda (frame)
      (paint-down frame)
      (paint-up frame)
      )
    )
  )

(define (below1 painter1 painter2)
  (rotate90 (beside painter1 painter2))
  )

(define (corner-split painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
            (right (right-split painter (- n 1))))
        (let ((top-left (beside up up))
              (bottom-right (below right right))
              (corner (corner-split painter (- n 1))))
          (beside (below painter top-left)
                  (below bottom-right corner))))))
