#lang sicp

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (print x)
  (display x)
  (newline)
  )

; Huffman trees

; Leaves of the tree
(define (make-leaf symbol weight) (list 'leaf symbol weight))

(define (leaf? object) (eq? (car object) 'leaf))

(define (symbol-leaf x) (cadr x))

(define (weight-leaf x) (caddr x))

; trees
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))

(define (left-branch
         tree) (car
                tree))

(define (right-branch tree) (cadr tree))

(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))

(define (weight tree)
  ;(print tree)
  ;(print (cdddr tree))
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

; decoding algorithm
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))

(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit: CHOOSE-BRANCH" bit))))

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))

(define (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair)   ; symbol
                               (cadr pair)) ; frequency
                    (make-leaf-set (cdr pairs))))))

(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                   (make-leaf 'B 2)
                   (make-code-tree
                    (make-leaf 'D 1)
                    (make-leaf 'C 1)))))

(define sample-bits '(0 1 1 0 0 1 0 1 0 1 1 1 0)) ; (A D A B B C A)

(define (encode message tree)
  (if (null? message)
      '()
      (cons (encode-symbol (car message) tree)
            (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
  ;(print tree)
  (cond ((null? tree)
         (error "encode-symbol: symbol not in the tree" symbol))
        ((and (leaf? tree) (equal? (symbol-leaf tree) symbol)) '())
        (else
         (let (
               (next-branch (choose-branch-s symbol tree)) ; next-branch = (branch, bit)
               )
           (if (null? next-branch)
               (error "encode-symbol: symbol not in the tree" symbol)
               (cons (cadr next-branch) (encode-symbol symbol (car next-branch)))
               )
           )
         )
        )
  )

(define (choose-branch-s symbol tree)
  (let (
        (lb (left-branch tree))
        (rb (right-branch tree))
        )
    (cond
      ((and (not (null? lb)) (element-of-set? symbol (symbols lb)))
       (list lb '0))
      ((and (not (null? rb)) (element-of-set? symbol (symbols rb)))
       (list rb '1))
      (else '())
      )
    )
  )

(define sample-message '(A D A B B C A))

; 2.69
(define (generate-huffman-tree pairs)
  (successive-merge1 (make-leaf-set pairs)))

(define (successive-merge1 leaf-set)
  (if (<= (length leaf-set) 1)
      (car leaf-set)
      (successive-merge1
       (adjoin-set (make-code-tree (car leaf-set) (cadr leaf-set))
                   (cddr leaf-set)))
      )
  )

(define (successive-merge2 leaf-set)
  (if (= (length leaf-set) 1)
      (car leaf-set)
      (successive-merge2 (merge-two-lightest leaf-set))
      )
  )

(define (merge-two-lightest leaf-set)
  (print leaf-set)
  (let (
        (first (car leaf-set))
        (first-rest (cdr leaf-set))
        (second-rest (cddr leaf-set))
        (second (cadr leaf-set))
        )
    (if (> (length leaf-set) 2)
        (let ((third (caddr leaf-set)))
          (if (<= (weight third) (weight first))
              (cons first (merge-two-lightest first-rest))
              (move-up (cons (make-code-tree first second) second-rest))
              )
          )
        (list (make-code-tree first second))
        )
    )
  )

(define (move-up leaf-set)
  (display "move-up:")
  (print leaf-set)
  (if (> (length leaf-set) 1)
      (let (
            (first (car leaf-set))
            (second (cadr leaf-set))
            (rest (cddr leaf-set))
            )
        (if (> (weight first) (weight second))
            (cons second (move-up (cons first rest)))
            leaf-set
            )
        )
      leaf-set
      )
  )

(define sample-pairs (list (list 'A 1) (list 'B 1) (list 'C 1)
                           (list 'D 1) (list 'E 2) (list 'F 4)))

(define test-tree (generate-huffman-tree '((A 3) (B 5) (C 6) (D 6)))) 
;(print test-tree)
(encode '(A B C D) test-tree)

;2.70
(define song-tree (generate-huffman-tree '((A 2) (BOOM 1) (GET 2) (JOB 2)
                                                 (SHA 3) (NA 16) (WAH 1) (YIP 9))))
(define song-message '(GET A JOB
                           SHA NA NA NA NA NA NA NA NA
                           GET A JOB SHA NA NA NA NA NA NA NA NA
                           WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP
                           SHA BOOM))

