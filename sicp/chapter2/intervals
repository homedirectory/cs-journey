#lang sicp

(define (make-interval a b) (cons a b))

(define (upper-bound i)
  (let (
        (a (car i))
        (b (cdr i))
        )
    (if (> a b)
        a
        b
        )
    )
  )

(define (lower-bound i)
  (let (
        (a (car i))
        (b (cdr i))
        )
    (if (< a b)
        a
        b
        )
    )
  )

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))
                 )
  )

(define (mul-interval x y)
  (let (
        (p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y)))
        )
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4)
                   )
    )
  )

(define (div-interval x y)
  (if (or (= (upper-bound y) 0) (= (lower-bound y) 0))
      (error "Can't divide by an interval that spans zero")
      )
  (mul-interval
   x
   (make-interval (/ 1.0 (upper-bound y))
                  (/ 1.0 (lower-bound y))
                  )
   )
  )

(define (sub-interval x y)
  (make-interval
   (- (lower-bound x) (upper-bound y))
   (- (upper-bound x) (lower-bound y))
   )
  )

(define (make-center-width c w)
  (make-interval (- c w) (+ c w))
  )

(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2)
  )

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2)
  )

(define (make-center-percent c p)
  (let ((w (* c p)))
    (make-center-width c w)
    )
  )

(define (percent i)
  (/ (width) (center))
  )

(define (prod-percent x y)
  (let (
        (xl (lower-bound x))
        (xu (upper-bound x))
        (yl (lower-bound y))
        (yu (upper-bound y))
        )
  (/ (- (* xu yu) (* xl yl)) (+ (* xu yu) (* xl yl)))
    )
  )

