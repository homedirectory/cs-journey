#lang sicp
(define (square x) (* x  x))

(define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))
        )
  )

(define (avg x y)
  (/ (+ x y) 2)
  )

(define (improve guess x)
  (avg guess (/ x guess))
  )

(define (change guess prev-guess)
  (/ (abs (- guess prev-guess)) prev-guess)
  )

(define (good-enough? guess prev-guess)
  (< (change guess prev-guess) 0.001)
  )

(define (sqrt-iter guess x prev-guess)
  (if (good-enough? guess prev-guess)
      guess
      (sqrt-iter (improve guess x) x guess)
  )
  )

(define (sqrt x) (sqrt-iter 1.0 x 2))