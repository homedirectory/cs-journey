#lang sicp

(define dx 0.00001)

(define (square x) (* x x))

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance)
    )
  
  (define (try guess steps)
    (let ((next (f guess)))
      (display steps)
      (display ": f(")
      (display guess)
      (display ") = ")
      (display next)
      (newline)
      
      (if (close-enough? guess next)
          next
          (try next (+ steps 1)))
      )
    )
  
  (try first-guess 1)
  )

(define (deriv g)
  (lambda (x) (/ (- (g (+ x dx)) (g x)) dx))
  )

(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((deriv g) x))))
  )

(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess)
  )


(define (sqrt x)
  (newtons-method
   (lambda (y) (- (square y) x)) 1.0)
  )

(define (cube x) (* x x x))

(define (cubic a b c)
  (lambda (x) (+ (cube x) (* a (square x)) (* b x) c))
  )

(define (double f)
  (display f)
  (newline)
  (lambda (x) (f (f x)))
  )

(define (compose f g)
  (lambda (x) (f (g x)))
  )

(define (repeated f n)

  (define (iter g i)
    (if (= i 1) g
        (iter (lambda (x) (f (g x))) (- i 1))
        )
    )

  (iter f n)
  )

(define (smooth f)
  (lambda (x) (/ (+ (f (- x dx)) (f x) (f (+ x dx))) 3))
  )

(define (smooth-n f n)
  ((repeated smooth n) f)
  )

(define (average x y)
  (/ (+ x y) 2)
  )

(define (average-damp f)
  (lambda (x) (average x (f x)))
  )

(define (average-damp-n f n)
  (if (= n 0) f
      ((repeated average-damp n) f)
      )
  )

(define (fast-expt-iter b n a)
  (cond ((= n 0) a)
        ((even? n) (fast-expt-iter (square b) (/ n 2) a))
        (else (fast-expt-iter b (- n 1) (* a b)))
        )
  )

(define (expt x n)
  (fast-expt-iter x n 1)
  )

(define (root x n)
  (let (
        (an (log n 2))
        )
    (fixed-point (average-damp-n (lambda (y) (/ x (expt y (- n 1)))) an) 1.0)
    )
  )

(define (iterative-improve good? improve)
  (lambda (guess)
    
    (define (try x)
      (let (
            (next (improve x))
            )
        (if (good? x next)
            next
            (try next)
            )
        )
      )
    
    (try guess)
    )
  )

(define (ii-fixed-point f guess)
  
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance)
    )
  
  ((iterative-improve close-enough? f) guess)
  )

(define (ii-root x n)
  (let (
        (an (floor (log n 2)))
        )
    (ii-fixed-point (average-damp-n (lambda (y) (/ x (expt y (- n 1)))) an) 1.0)
    )
  )

(define (ii-sqrt x)

  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance)
    )

  (define (improve y)
    (/ (+ y (/ x y)) 2)
    )

  ((iterative-improve close-enough?  improve) 1.0)
  )