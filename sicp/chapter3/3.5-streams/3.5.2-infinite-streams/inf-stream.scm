#lang sicp

(#%require "../stream.scm")
(#%require "../../../helpers.scm")

;----------------------------------------------------

(define (integers-starting-from n)
  (cons-stream n (integers-starting-from (+ n 1)))
  )

(define integers (integers-starting-from 1))

(define (divisible? x y) (= (remainder x y) 0))

; the sieve of Eratosthenes for computing prime numbers
(define (sieve stream)
  (cons-stream
   (stream-car stream)
   (sieve (stream-filter
           (lambda (x)
             (not (divisible? x (stream-car stream))))
           (stream-cdr stream)))
   )
  )

(define primes (sieve (integers-starting-from 2)))


; * Defining streams implicitly *
(define ones (cons-stream 1 ones))

(define (add-streams . argstreams)
  (apply stream-map (cons + argstreams))
  )

(define integers-impl (cons-stream 1 (add-streams ones integers)))

; This definition says that fibs is a stream beginning with 0 and 1, such
; that the rest of the stream can be generated by adding fibs to itself
; shifted by one place:
(define fibs
  (cons-stream
   0
   (cons-stream 1 (add-streams (stream-cdr fibs) fibs))
   )
  )

; Multiply each element in a stream by a constant
(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor))
              stream)
  )

(define primes-impl
  (cons-stream
   2
   (stream-filter prime? (integers-starting-from 3))
   )
  )

(define (prime? n)
  (define (iter ps)
    (cond ((> (square (stream-car ps)) n) true)
          ((divisible? n (stream-car ps)) false)
          (else (iter (stream-cdr ps)))
          )
    )
  
  (iter primes-impl)
  )

;-------------------------------------------------
(#%provide add-streams scale-stream integers)